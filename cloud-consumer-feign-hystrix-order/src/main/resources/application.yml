server:
  port: 80

spring:
  application:
    name: cloud-order-service

eureka:
  client:
    # 表示是否将自己注册进 Eureka Server，默认为 true
    # 消费者不提供服务，可不将其注册进入 注册中心
    register-with-eureka: false
    # 是否从 Eureka Server 抓取已有的注册信息，默认为 true。单节点无所谓，集群必须设置为 true 才能配合 Ribbon 使用负载均衡。
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:7001/eureka/ # 单机版
      # defaultZone: http://eureka7001.com:7001/eureka/, http://eureka7002.com:7002/eureka/ # 集群版

ribbon:
  connectTimeout: 5000 # 建立连接所用的时间
  ReadTimeout: 5000 # 建立连接后从服务器读取到可用资源所用的时间

feign:
  hystrix:
    enabled: true # 开启服务降级等功能

hystrix:
  command:
    default: # default全局有效，service id指定应用有效
      execution:
        timeout:
          enable: true
          # 1、如果enabled设置为false，则请求超时交给ribbon控制，此时
          #   @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "3000")不起效。
          # 2、如果enabled设置为true，则hystrix也有对超时的控制权，
          #   @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "3000")起效果。
          # 3、且如果enabled设置为true，ribbon、hystrix都有对请求超时的控权，且控制效果一样。
        isolation:
          thread:
            timeoutInMilliseconds: 5000
            # 由于enabled设置为true，ribbon，hystrix都有对请求超时的控制权，
            # 所以建议ribbon.ReadTimeout和timeoutInMilliseconds指定的时间一致。
